package ssh_config

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
	"testing"
	"path/filepath"
)

var (
	ssh_config_example = `# ssh config generated by some go code (github.com/jasonmoo/ssh_config)

# global configuration
VisualHostKey yes

# host-based configuration

# dev
Host dev
  HostName 127.0.0.1
  User ubuntu
  Port 22

Host *.google.com *.yahoo.com
  User root
`

	ssh_config_example_no_headers = `VisualHostKey yes

# dev
Host dev
  HostName 127.0.0.1
  User ubuntu
  Port 22

Host *.google.com *.yahoo.com
  User root
`
)

func TestWriteToPath(t *testing.T) {
	config, err := Parse(strings.NewReader(ssh_config_example))
	if err != nil {
		t.Fatal(err)
	}

	f, err := ioutil.TempFile("", "")
	if err != nil {
		t.Fatal(err)
	}

	defer os.Remove(f.Name())

	if err := config.WriteToFilepath(f.Name(), nil); err != nil {
		t.Fatal(err)
	}
}

func TestWriteToNewFile(t *testing.T) {
	config, err := Parse(strings.NewReader(ssh_config_example))
	if err != nil {
		t.Fatal(err)
	}

	d, err := ioutil.TempDir("","")
	if err != nil {
		t.Fatal(err)
	}

	defer os.RemoveAll(d)
	path := filepath.Join(d, "config")

	if err := config.WriteToFilepath(path, nil); err != nil {
		t.Fatal(err)
	}


}

func TestParseAndWriteTo(t *testing.T) {

	config, err := Parse(strings.NewReader(ssh_config_example))
	if err != nil {
		t.Error(err)
	}

	buf := &bytes.Buffer{}

	config.WriteTo(buf, nil)

	if buf.String() != ssh_config_example {

		fmt.Println("==== expected")
		fmt.Println(ssh_config_example)
		fmt.Println("==== actual")
		fmt.Println(buf.String())
		fmt.Println("====")

		t.Errorf("input output mismatch")
	}

}

func TestParseAndWriteToNoHeaders(t *testing.T) {

	config, err := Parse(strings.NewReader(ssh_config_example))
	if err != nil {
		t.Error(err)
	}

	buf := &bytes.Buffer{}

	config.WriteTo(buf, &SaveOptions{
		FileHeader:                false,
		GlobalConfigurationHeader: false,
		HostConfigurationHeader:   false,
	})

	if buf.String() != ssh_config_example_no_headers {

		fmt.Println("==== expected")
		fmt.Println(ssh_config_example_no_headers)
		fmt.Println("==== actual")
		fmt.Println(buf.String())
		fmt.Println("====")

		t.Errorf("input output mismatch")
	}

}
